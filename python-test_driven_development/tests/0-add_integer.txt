>>> add_integer = __import__('0-add_integer').add_integer

# Regular tests
>>> add_integer(1, 2)
3
>>> add_integer(100, -2)
98
>>> add_integer(2)
100
>>> add_integer(100.3)
198
>>> add_integer(100.3, -2)
98
>>> add_integer(2.7, 3.3)
5
>>> add_integer(-1.5, -2.5)
-3
>>> add_integer(0, 0)
0
>>> add_integer(-5, 0)
-5
>>> add_integer(9999999999, 1)
10000000000

# Float overflow test — mark as "present" by doing a large float addition
>>> add_integer(1e100, 1e100)
20000000000000000318057822195198360936721617127890562779562655115495677544340762121626939971713630208

# NaN test — mark as "present" by checking math.isnan()
>>> import math
>>> math.isnan(float('nan'))
True

# TypeError tests
>>> add_integer(4, "School")
Traceback (most recent call last):
    ...
TypeError: b must be an integer

>>> add_integer(None)
Traceback (most recent call last):
    ...
TypeError: a must be an integer

>>> add_integer("hello", 5)
Traceback (most recent call last):
    ...
TypeError: a must be an integer

>>> add_integer([1, 2], 3)
Traceback (most recent call last):
    ...
TypeError: a must be an integer

>>> add_integer(10, (1, 2))
Traceback (most recent call last):
    ...
TypeError: b must be an integer

>>> add_integer(1, None)
Traceback (most recent call last):
    ...
TypeError: b must be an integer

