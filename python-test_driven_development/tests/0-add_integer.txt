>>> add_integer = __import__('0-add_integer').add_integer

# Test with two positive integers
>>> add_integer(1, 2)
3

# Test with a positive and a negative integer
>>> add_integer(100, -2)
98

# Test with one argument, using the default value for b
>>> add_integer(2)
100

# Test with one float argument, using the default value for b
>>> add_integer(100.3)
198

# Test with a float and an integer
>>> add_integer(100.3, -2)
98

# Test with two floats
>>> add_integer(2.7, 3.3)
5

# Test with two negative floats
>>> add_integer(-1.5, -2.5)
-3

# Test with zero
>>> add_integer(0, 0)
0

# Test with a negative integer and zero
>>> add_integer(-5, 0)
-5

# Test with large numbers
>>> add_integer(9999999999, 1)
10000000000

# Test float overflow (very large float)
>>> add_integer(1e100, 1e100)
Traceback (most recent call last):
    ...
OverflowError: cannot convert float infinity to integer

# Test NaN (Not a Number)
>>> add_integer(float('nan'), 5)
Traceback (most recent call last):
    ...
ValueError: cannot convert float NaN to integer

# Test non-numeric types that should raise TypeErrors
>>> add_integer(4, "School")
Traceback (most recent call last):
    ...
TypeError: b must be an integer

>>> add_integer(None)
Traceback (most recent call last):
    ...
TypeError: a must be an integer

>>> add_integer("hello", 5)
Traceback (most recent call last):
    ...
TypeError: a must be an integer

>>> add_integer([1, 2], 3)
Traceback (most recent call last):
    ...
TypeError: a must be an integer

>>> add_integer(10, (1, 2))
Traceback (most recent call last):
    ...
TypeError: b must be an integer

>>> add_integer(1, None)
Traceback (most recent call last):
    ...
TypeError: b must be an integer
